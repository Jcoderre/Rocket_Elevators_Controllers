"/******************************************************************|
*   This pseudo code is about the residential elevator controllers.|
* _________________________________________________________________|
*           it is based on the fact that we have :                 |
*                                                                  |
*                  - 1 column of 2 elevators,                      |
*                  - 10 floors                                     |
*__________________________________________________________________|
*           The facts that those object can be moved :             |
*                                                                  |
*                  - Column,                                       |
*                  - Elevator,                                     |
*                  - Call Button ( Outside the elevator ),         |
*                  - Doors ( Elevator Doors ),                     |
*                  - Elevator Button  ( inside the elevator )      |
*_________________________________________________________________ |
*           Button that can be found outside the elevator :        |
*                                                                  |
*                  - Up                                            |
*                  - Down                                          |
*_________________________________________________________________ | 
*           Button that can be found in the elevator :             |
*                                                                  |
*                  - Buttons from 1 to 10                          |
*                  - Emergency stop Button                         |
*                  - Open Doors                                    |
*                  - Close Doors                                   |
*_________________________________________________________________ |
*                                                                  |
*            PseudoCode written By : J.Coderre                     |
*                 Date of creation : 2020-09-21                    |
*                                                                  |
******************************************************************/"

START

' var time_Now = new Date().getTime();
 SET Time_Now to today date and actual hour  'new Date().getTime()


'/****************   Object ********************/


DEFINE Column USING _id AND minFloor AND maxFloor AND elevator_amount       'Define our Column
    ID: id    
    minimumFloor: minFloor
    maximumFloor: maxFloor
    ElevatorList: empty List
    status: IDLE
    callButtonsList: empty LIST

    SET amountOfFloor TO (maximumFloor - minimumFloor)

    CALL createElevator WITH elevator_amount
    CALL createCallButtons WITH amountOfFloor
   
    SEQUENCE createElevator USING elevator_amount
        SET iterator TO 1                                                    ' Create a For loop to create the 
        For elevator_amount                                                  ' Right amount of elevator 
            SET newElevator TO INSTANTIATE Elevator with iterator
            ADD newElevator TO ElevatorList
            INCREMENT iterator BY 1
        ENDFOR
     ENDSEQUENCE

     SEQUENCE createCallButtons USING amountOfFloor                                     ' Create a For loop
        SET iterator TO minimumFloor                                                    ' to create the right 
        FOR amountOfFloor                                                               ' amount of button
            IF iterator NOT EQUALS TO maximumFloor
                SET newCallButtonUp TO INSTANTIATE CallButton WITH up AND iterator
                ADD newCallButtonUp TO callButtonsList
            ENDIF
            IF iterator IS GREATER THAN minimumFloor
                SET newCallButtonDown TO INSTANTIATE CallButton WITH down AND iterator                
                ADD newCallButtonUp TO callButtonsList
            ENDIF
            INCREMENT iterator BY 1
        ENDFOR
     ENDSEQUENCE

ENDDEFINE

DEFINE Elevator USING id                          ' Define our Elevator'
    ID: id
    Elevator_queue to empty List
    requestButtonList: empty LIST
    status to IDLE                               ' MOVING or IDLE, stopped, maintance, offline
    Direction : NULL                              ' Elevator_UP or Elevator_Down
    currentFloor: 1                                 
    doors : Close                                 ' Close or Open
    MaxWeight: 2500
    ActualWeight: 0
    
    CALL SEQUENCE ShowTime()

    'Creating a moving sequence to the elevator'

    WHEN Elevator_queue is empty
        SET status to IDLE

    WHEN Elevator_queue is not empty
        SET status to MOVING

    SEQUENCE move
        WHILE elevator status is MOVING
            IF (elevator is 2 floor away or more from requested floor)
                Travel full speed to destination
                CALL SEQUENCE SlowDownSafety() 
                CALL SEQUENCE DoubleSafetyStop()
            ELSE
                travel normal speed to destination
                CALL SEQUENCE SlowDownSafety()
                CALL SEQUENCE DoubleSafetyStop()
            ENDIF  
        ENDWHILE
        
        IF (currentFloor EQUAL Elevator_queue OR requestButtonList )
            CALL SEQUENCE Open_and_Close_Doors()
            SET doors to open
        ELSE
            SET doors to close
        ENDIF

        WHEN elevator_queue list go up
            SET Direction to Elevator_UP
                
        WHEN elevator_queue list go down
            SET Direction to  Elevator_Down                
    ENDSEQUENCE

    SEQUENCE Weight_Calculate
        WHILE elevator status IS NOT offline
            SET ActualWeight
            IF ActualWeight IS EQUAL OR HIGHER THAN (Maxweight - 100) 
                DISPLAY in elevator display "LOADED!"
            ELSE IF ActualWeight is HIGHER THAN maxWeight
                SET status to Stopped 
                SET door to open
                DISPLAY in elevator display "OVERLOADED Please respect security protocol "
            ENDIF
        ENDWHILE
    ENDSEQUENCE

    CALL SEQUENCE Weight_Calculate()

ENDDEFINE


DEFINE CallButton USING _direction AND _floor
    direction: _direction
    floor: _floor

    WHEN button_Up is pressed
        SET Direction status to Up

    WHEN button_Down is pressed
        SET Direction status to Down
ENDDEFINE


'/****************   Display SEQUENCEs   **********************/

SEQUENCE ShowTime()                  ' Show Actual Time
    DISPLAY time in elevator ' Display time_Now
ENDSEQUENCE

SEQUENCE display_Btn_Active()        ' Display Light when input is activate
    IF (user input buttons)
        IF (buttons are still in queue)
            Activate buttons light
        ELSE IF (buttons are no more in queue)
            (Desactivate button light)
        ENDIF
    ENDIF
ENDSEQUENCE

SEQUENCE display_Active_Floor()      ' Show active floor on display outside and outside 
    IF (elevator is on a floor) 
        activate Active_floor on intern and extern display
    ENDIF
ENDSEQUENCE

'/************************ Elevator SEQUENCEs ***************************/

SEQUENCE Initialize()                ' Go back to Floor 1 if IDLE for to long
    IF (Elevators status IDLE for 10 minutes)
        IF (Button is press  AND other elevator busy )
            IF  (CallButton Direction status is Down) 
                add to Elevator_queue
                CALL SEQUENCE SlowDownSafety()
                CALL SEQUENCE DoubleSafetyStop()
            ELSE IF (CallButton Direction status is Up)
                ADD to Elevator_queue
                CALL SEQUENCE SlowDownSafety()
                CALL SEQUENCE DoubleSafetyStop()
            ENDIF
        ELSE
            Go to first floor
            CALL SEQUENCE SlowDownSafety()
            CALL SEQUENCE DoubleSafetyStop()
        ENDIF
    ENDIF
ENDSEQUENCE 

SEQUENCE Open_and_Close_Doors()      ' Open and close door
    open door
    IF (Door open)
        start Countdown 20 seconds
        IF (Button Close_Door is pressed)
            set countdown to 3 seconds
        ELSE IF (Countdown reach 0)
            start SEQUENCE DoorCloseFailSafe()
        ENDIF
    ENDIF
ENDSEQUENCE

SEQUENCE Anti_Shenanigans()          ' reset button if to much are push to quick  
    IF (all input request in elevator are set in less then 5 seconds)
        reset the Elevator_queue
    ENDIF
ENDSEQUENCE

'/****************** Safety SEQUENCEs  *******************/

SEQUENCE SlowDownSafety()            ' Safety to not hurt passenger while moving
    IF (Traveling up at full speed)
        IF (Only 1 floor away from the lowest destination floor)
            slow down
        ENDIF
    ELSE IF (Traveling down at full speed)
        IF (Only 1 floor away from the highest destination floor)
            slow down
        ENDIF
    ENDIF
ENDSEQUENCE

SEQUENCE DoubleSafetyStop()          ' Safety to not go to fast while close to floor or top
    IF (we are traveling up at full speed) 
        IF (we are at floor 9)
            Slow Down
            Stop at floor 10
        ENDIF
    ELSE IF (we are traveling down at full speed)
        IF (we are at floor 2) 
            slow down
            stop at floor 1
        ENDIF
    ENDIF
ENDSEQUENCE

SEQUENCE DoorCloseFailSafe()         ' Safety to not get squeezed by doors
    WHILE (door close)
        IF (Door is obstruct OR object pass door OR the button Open_Door is pressed)
            stop the action of the doors
            open doors
        ELSE 
            close doors
        ENDIF
    ENDWHILE
ENDSEQUENCE

'/******************* Operative ***********************/

SEQUENCE request_Floor USING  floor and direction         ' Request OUTSIDE elevator
    WHEN button_Up is pressed
        CALL SEQUENCE Find_Elevator() RETURNING elevator            
        ADD floor TO Elevator_queue
        CALL move OF elevator      
        CALL SEQUENCE display_Btn_Active()
        CALL SEQUENCE display_Active_Floor() 

    WHEN button_Down is pressed
        CALL SEQUENCE Find_Elevator() RETURNING elevator
        ADD floor TO Elevator_queue
        CALL move OF elevator
        CALL SEQUENCE display_Btn_Active()
        CALL SEQUENCE display_Active_Floor()
ENDSEQUENCE

SEQUENCE request_Elevator USING floor AND direction        ' Request INSIDE Elevator
    WHEN Button_Is_Press
        ADD floor to requestButtonList
        CALL move OF elevator
        CALL SEQUENCE Anti_Shenanigans()
        CALL SEQUENCE display_Btn_Active()
        CALL SEQUENCE display_Active_Floor()
ENDSEQUENCE

SEQUENCE Find_Elevator USING floor AND direction                                    ' Choose Elevator
    WHILE Elevator is Undefined
        FOR EACH elevator in Elevator_array                                         ' chose the best elevator
            IF (CallButton Direction status is Up)                                  ' Check if Callbutton go up if YES ..
                IF (Elevator status is IDLE AND other elevator status is Moving)    ' Check if IDLE and near Callbutton
                    IF (CurrentFloor is the closest)
                        Add elevator to is Elevator_queue                           ' IF yes add
                    ENDIF
                ELSE IF (Elevator status is Moving)                                 ' Check if Moving if YES
                    IF (Elevator Direction is Elevator_UP)                          ' Check if elevator go up if YES
                        IF (Floor request is above elevator )                       ' Check if request is on the way
                            Add elevator to is Elevator_queue                       ' If YES add
                        ELSE IF (Floor request is under elevator)                   ' If NO dont go
                            Dont go
                        ENDIF                                                
                    ELSE IF (Elevator Direction is Elevator_Down )                  ' Check if elevator go down 
                        Dont go                                                     ' IF YES dont go
                    ENDIF
                ENDIF
            ELSE IF (CallButton Direction status is Down)                           ' Check if Callbuttonr go down if YES ...
                IF (Elevator status is IDLE AND other elevator status is Moving)    ' Check if IDLE and near Callbutton
                    IF (CurrentFloor is the closest)
                        Add  to is Elevator_queue                                   ' IF yes add
                    ELSE 
                        Dont go
                    ENDIF    
                ELSE IF (Elevator status is Moving)                                 ' Check if Moving if YES
                    IF (Elevator Direction is Elevator_UP)                          ' Check if elevator go up 
                        Dont go                                                     ' If YES dont go
                    ELSE IF (Elevator Direction is Elevator_Down )                  ' If YES Check if elevator go down
                    IF (Floor request is under elevator )                           ' If YES Check if request is on the way
                            Add to is Elevator_queue                                ' If yes add
                        ELSE IF (Floor request is above elevator)                   ' If NO dont go
                            Dont go 
                        ENDIF                                                    
                    ENDIF
                ENDIF
            ENDIF
        ENDFOR
    ENDWHILE
    RETURN chosenElevator                                                           ' Return the right elevator
ENDSEQUENCE

--------------------------------------------------- TEST ------------------------------------------

SET Column1 to INSTANTIATE Column WITH 1, 1, 10, 2

'SCENARIO 1'
CALL request_Floor WITH 3, Up      ELEVATOR A IDLE FLOOR 2  || ELEVATOR B IDLE Floor 6
CALL request_Elevator WITH 7    
'SCENARIO 2'
CALL request_Floor WITH 1, Up
CALL request_Elevator WITH 6

CALL request_Floor WITH 3, Up
CALL request_Elevator WITH 5

CALL request_Floor WITH 9, Down
CALL request_Elevator WITH 2
'SCENARIO 3'
CALL request_Floor WITH 3, Down         ELEVATOR A IDLE F10 ||
CALL request_Elevator WITH 2

CALL request_Floor WITH 10, Down
CALL request_Elevator WITH 3

--------------------------------------------------END test--------------------------------------------
