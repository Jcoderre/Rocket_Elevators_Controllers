"/******************************************************************|
*   This pseudo code is about the residential elevator controllers.|
* _________________________________________________________________|
*           it is based on the fact that we have :                 |
*                                                                  |
*                  - 1 column of 2 elevators,                      |
*                  - 10 floors                                     |
*__________________________________________________________________|
*           The facts that those object can be moved :             |
*                                                                  |
*                  - Column,                                       |
*                  - Elevator,                                     |
*                  - Call Button ( Outside the elevator ),         |
*                  - Doors ( Elevator Doors ),                     |
*                  - Elevator Button  ( inside the elevator )      |
*_________________________________________________________________ |
*           Button that can be found outside the elevator :        |
*                                                                  |
*                  - Up                                            |
*                  - Down                                          |
*_________________________________________________________________ | 
*           Button that can be found in the elevator :             |
*                                                                  |
*                  - Buttons from 1 to 10                          |
*                  - Emergency stop Button                         |
*                  - Open Doors                                    |
*                  - Close Doors                                   |
*_________________________________________________________________ |
*                                                                  |
*            PseudoCode written By : J.Coderre                     |
*                 Date of creation : 2020-09-21                    |
*                                                                  |
******************************************************************/"

START

' var time_Now = new Date().getTime();
INPUT time_Now = GET current time 


'/****************   Object ********************/

DEFINE Column USING id AND status:****
    ID: id,
    Status: status,   
    ElevatorList: SET to empty List

    SEQUENCE createElevatorList USING elevator_amount   
       
    ENDSEQUENCE
    SEQUENCE   createStatus    

    ENDSEQUENCE
ENDDEFINE


DEFINE Elevator USING id AND status AND Max_Weight AND Elevator_Weight:
    ID: id,
    SET status to IDLE      ' MOVING or IDLE or STOP
    Elevator_Weight: 0,     ' Elevator starting weight
    Max_Weight: 2100,       ' Max_Weight values ar calculate in  pound (LBS)
    Elevator_queue: SET to empty List

    WHEN button_Up is pressed
        SET user_travel to up
        EXECUTE program display_Btn_Active()
        ADD to elevator_queue 

    WHEN button_Down is pressed
        SET user_travel to down
        EXECUTE program display_Btn_Active()
        ADD to Elevator_queue

    WHEN Button_Is_Press
    EXECUTE program display_Btn_Active()
        IF user_input > current_floor 
            SET user_travel to up
            ADD to Elevator_queue
        ELSE IF user_input < current_Floor
            SET user_travel to down
            ADD to Elevator_queue
        END

    WHEN Elevator_queue is empty
        SET status to IDLE

    WHEN Elevator_queue is not empty
        SET status to MOVING
    

    SEQUENCE createElevatorWeight 
            SET total to zero
            FOR the counter is less than or equal to Max_Weight (2100)
                ADD counter to total
            ENDFOR
            SET Elevator_Weight
    ENDSEQUENCE

ENDDEFINE
SET Elevator1 TO INSTANTIATE Elevator WITH 1 AND online
SET Elevator1 status TO offline



'/****************   Display programs   **********************/

PROGRAM ShowTime()
    DISPLAY the time somewhere in the elevator; ' Display time_Now
END

PROGRAM display_Btn_Active()
    IF user input buttons
        IF buttons are still in queue
            Activate buttons light
        ELSE IF buttons are no more in queue
            Desactivate button light
        END
    END
END

PROGRAM display_Active_Floor()
    IF elevator is on a floor 
        Avtivate active floor on intern and extern display
    END
END

'/************************ Elevator programs ***************************/

PROGRAM Initialize()
    IF elevator is IDLE for 5 minutes
        go down to first floor
        Slow Down when necessary // SlowDownIfNecessary(), DoubleSafetyStop()
        IF a Queue is activate AND other elevator is busy and unable to take request
            IF  the queue is traveling down 
                add to queue line
                slow down when necessary // SlowDownSafety(), DoubleSafetyStop()
                stop at user floor
            ELSE IF the queue is travelling up
                slow down when necessary // SlowDownSafety(), DoubleSafetyStop()
                stop at next floor
                take queue query
            END
        END 
    END
END

PROGRAM Queue()*****
    IF elevator MOVE OR IDLE
        IF elevator are unable to take request
            Create an a array of pending request
        END
        ELSE IF available
            Create an a array of request
            Execute that array in order
            IF elevator is traveling
                ADD to queue all Call Buttons on the way
                ADD to queue all elevator button on the way
            END
        ELSE IF request queue end check for pending request
            IF request are pending 
                Execute that array in order
            ELSE IF no request are pending
                EXECUTE program Initialize()
            END
        END
    END
END

PROGRAM Open_and_Close_Doors()
    open door
    EXECUTE program Elevator_Overweight()
    IF door open
        start Countdown 20 seconds
        IF the button Close_Door is pressed
            set countdown to 3 seconds
        ELSE IF the countdown reach 0
            start PROGRAM DoorCloseFailSafe()
    END
END

PROGRAM timer()
    Create a variable for a 20 seconds time left

END

PROGRAM Anti_Shenanigans()
    IF all input request in elevator are set in less then 5 seconds
        reset the elevator PROGRAM Queue()
    END
END

'/****************** Safety Programs  *******************/

PROGRAM SlowDownSafety()
    IF we are traveling up at full speed
        IF we are only 1 floor away from the lowest destination floor
            slow down
        END
    ELSE IF we are traveling down at full speed
        IF we are only 1 floor away from the highest destination floor
            slow down
        END
    END
END

PROGRAM DoubleSafetyStop()
    IF we are traveling up at full speed 
        IF we are at floor 9
            Slow Down
            Stop at floor 10
        END
    ELSE IF we are traveling down at full speed
        IF we are at floor 2 
            slow down
            stop at floor 1
        END
    END
END

PROGRAM DoorCloseFailSafe()
    WHILE door close
        IF something obstruct the door OR something pass in between the door OR the button Open_Door is pressed
            stop the action of the doors
            open doors
        ELSE 
            close doors
    END
END

PROGRAM Elevator_Overweight()****
    IF Elevator_Weight is higher then Max_Weight // If elevator weight > Max_Weight
        STOP countdown
        Door remain open
    END
END


'/******************* Operative ***********************/

SEQUENCE request_Floor()      ' Request OUTSIDE elevator
    WHEN button_Up is pressed
        SET user_travel to up
        EXECUTE program display_Btn_Active()
        ADD to elevator_queue 

    WHEN button_Down is pressed
        SET user_travel to down
        EXECUTE program display_Btn_Active()
        ADD to Elevator_queue

ENDSEQUENCE

SEQUENCE request_Elevator()     ' Request INSIDE Elevator
    WHEN Button_Is_Press
    EXECUTE program display_Btn_Active()
        IF user_input > current_floor 
            SET user_travel to up
            ADD to Elevator_queue
        ELSE IF user_input < current_Floor
            SET user_travel to down
            ADD to Elevator_queue
        END
ENDSEQUENCE

SEQUENCE Find_Elevator()     ' Choose Elevator

ENDSEQUENCE




SEQUENCE Elevator_Move_Schema()

    EXECUTE program ShowTime(), 
    EXECUTE program display_Btn_Active(),
    EXECUTE program display_Active_Floor(),
    EXECUTE program Anti_Shenanigans()

    
        IF elevator is at the same floor
            EXECUTE PROGRAM Elevator_Overweight()
            EXECUTE program Open_and_Close_Doors()
            IF door is close 
                EXECUTE program Queue() of user input
            ELSE
                wait
            END
        ELSE IF elevator is > then the request AND request go down
                IF elevator is 2 floor away or more from requested floor
                    Travel full speed to destination
                    EXECUTE program SlowDownSafety() AND DoubleSafetyStop()
                ELSE
                    travel normal speed to destination
                    EXECUTE program SlowDownSafety() AND DoubleSafetyStop()
                END
        ELSE IF elevator is < then the request AND request go down
                IF elevator is 2 floor away or more from requested floor
                    Travel full speed to destination
                    EXECUTE program SlowDownSafety() AND DoubleSafetyStop()
                ELSE
                    travel normal speed to destination
                    EXECUTE program SlowDownSafety() AND DoubleSafetyStop()
                END
        EXECUTE program Initialize()

ENDSEQUENCE