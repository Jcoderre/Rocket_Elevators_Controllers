"/******************************************************************|
*   This pseudo code is about the residential elevator controllers.|
* _________________________________________________________________|
*           it is based on the fact that we have :                 |
*                                                                  |
*                  - 1 column of 2 elevators,                      |
*                  - 10 floors                                     |
*__________________________________________________________________|
*           The facts that those object can be moved :             |
*                                                                  |
*                  - Column,                                       |
*                  - Elevator,                                     |
*                  - Call Button ( Outside the elevator ),         |
*                  - Doors ( Elevator Doors ),                     |
*                  - Elevator Button  ( inside the elevator )      |
*_________________________________________________________________ |
*           Button that can be found outside the elevator :        |
*                                                                  |
*                  - Up                                            |
*                  - Down                                          |
*_________________________________________________________________ | 
*           Button that can be found in the elevator :             |
*                                                                  |
*                  - Buttons from 1 to 10                          |
*                  - Emergency stop Button                         |
*                  - Open Doors                                    |
*                  - Close Doors                                   |
*_________________________________________________________________ |
*                                                                  |
*            PseudoCode written By : J.Coderre                     |
*                 Date of creation : 2020-09-21                    |
*                                                                  |
******************************************************************/"

START

' var time_Now = new Date().getTime();
INPUT time_Now = GET current time 


'/****************   Object ********************/

DEFINE Column 
    ID: id,   
    ElevatorList: SET to empty List

    SEQUENCE 
    createElevatorList USING elevator_amount  

        LET Elevator_Per_Column = 2
        LET Elevator_array = [];
        'for (var i = 0; i < Elevator_Per_Column.length; i++) {
        '    Elevator_array.push[i];
        '}
        FOR each elevator in array when max is the NB of elevator per column add elevator to array
            increment this number to Elevator_array
    ENDSEQUENCE
ENDDEFINE
INSTANTIATE Column


DEFINE Elevator 
    ID: id,
    SET status to IDLE                               ' MOVING or IDLE 
    SET MovingStatus to MovingStatus                 ' Elevator_UP or Elevator_Down
    SET Elevator_queue to empty List

    WHEN elevator_queue list go up
        SET MovingStatus to Elevator_UP
    WHEN elevator_queue list go down
        SET MovingStatus to  Elevator_Down


    WHEN button_Up is pressed
        CALL SEQUENCE display_Btn_Active()
        ADD button_Up  to elevator_queue            ' ADD the floor of button up to elevator queue

    WHEN button_Down is presse
        CALL SEQUENCE display_Btn_Active()
        ADD button_Down to Elevator_queue           ' ADD the floor of button up to elevator queue

    WHEN Button_Is_Press
    CALL SEQUENCE display_Btn_Active()
        IF (user_input bigger than current_floor) 
            SET user_travel to up
            ADD Button_Is_Press to Elevator_queue
        ELSE IF (user_input smaller than current_Floor)
            SET user_travel to down
            ADD Button_Is_Press to Elevator_queue
        ENDIF

    WHEN Elevator_queue is empty
        SET status to IDLE

    WHEN Elevator_queue is not empty
        SET status to MOVING
    
ENDDEFINE
INSTANTIATE Elevator


DEFINE User
    SET Status: status          ' User_up or User_Down

    WHEN button_Up is pressed
        SET User status to User_up
        CALL SEQUENCE display_Btn_Active()

    WHEN button_Down is pressed
        SET user_travel to down
        CALL SEQUENCE display_Btn_Active()

    WHEN Button_Is_Press
    CALL SEQUENCE display_Btn_Active()
        IF (user_input bigger than current_floor) 
            SET User status to User_up
        ELSE IF (user_input smaller than current_Floor)
            SET User status to User_Down
        ENDIF

ENDDEFINE
INSTANTIATE User

'/****************   Display SEQUENCEs   **********************/

SEQUENCE ShowTime()                  ' Show Actual Time
    DISPLAY time in elevator ' Display time_Now
ENDSEQUENCE

SEQUENCE display_Btn_Active()        ' Display Light when input is activate
    IF (user input buttons)
        IF (buttons are still in queue)
            Activate buttons light
        ELSE IF (buttons are no more in queue)
            (Desactivate button light)
        ENDIF
    ENDIF
ENDSEQUENCE

SEQUENCE display_Active_Floor()      ' Show active floor on display outside and outside 
    IF (elevator is on a floor) 
        activate Active_floor on intern and extern display
    ENDIF
ENDSEQUENCE

'/************************ Elevator SEQUENCEs ***************************/

SEQUENCE Initialize()                ' Go back to Floor 1 if IDLE for to long
    IF (Elevators status IDLE for 10 minutes)
        IF (Button is press  AND other elevator busy )
            IF  (User status go down) 
                add to Elevator_queue
                CALL SEQUENCE SlowDownSafety()
                CALL SEQUENCE DoubleSafetyStop()
            ELSE IF (User status go up)
                ADD to Elevator_queue
                CALL SEQUENCE SlowDownSafety()
                CALL SEQUENCE DoubleSafetyStop()
            ENDIF
        ELSE
            Go to first floor
            CALL SEQUENCE SlowDownSafety()
            CALL SEQUENCE DoubleSafetyStop()
        ENDIF
    ENDIF
ENDSEQUENCE 

SEQUENCE Open_and_Close_Doors()      ' Open and close door
    open door
    IF (Door open)
        start Countdown 20 seconds
        IF (Button Close_Door is pressed)
            set countdown to 3 seconds
        ELSE IF (Countdown reach 0)
            start SEQUENCE DoorCloseFailSafe()
    ENDIF
ENDSEQUENCE

SEQUENCE Anti_Shenanigans()          ' reset button if to much are push to quick  
    IF (all input request in elevator are set in less then 5 seconds)
        reset the Elevator_queue
    ENDIF
ENDSEQUENCE

'/****************** Safety SEQUENCEs  *******************/

SEQUENCE SlowDownSafety()            ' Safety to not hurt passenger while moving
    IF (Traveling up at full speed)
        IF (Only 1 floor away from the lowest destination floor)
            slow down
        ENDIF
    ELSE IF (Traveling down at full speed)
        IF (Only 1 floor away from the highest destination floor)
            slow down
        ENDIF
    ENDIF
ENDSEQUENCE

SEQUENCE DoubleSafetyStop()          ' Safety to not go to fast while close to floor or top
    IF (we are traveling up at full speed) 
        IF (we are at floor 9)
            Slow Down
            Stop at floor 10
        ENDIF
    ELSE IF (we are traveling down at full speed)
        IF (we are at floor 2) 
            slow down
            stop at floor 1
        ENDIF
    ENDIF
ENDSEQUENCE

SEQUENCE DoorCloseFailSafe()         ' Safety to not get squeezed by doors
    WHILE (door close)
        IF (Door is obstruct OR object pass door OR the button Open_Door is pressed)
            stop the action of the doors
            open doors
        ELSE 
            close doors
        ENDIF
    ENDWHILE
ENDSEQUENCE

'/******************* Operative ***********************/

SEQUENCE request_Floor()             ' Request OUTSIDE elevator
    WHEN button_Up is pressed
        CALL SEQUENCE display_Btn_Active()
        CALL SEQUENCE display_Active_Floor()
        CALL SEQUENCE Find_Elevator() 

    WHEN button_Down is pressed
        CALL SEQUENCE display_Btn_Active()
        CALL SEQUENCE display_Active_Floor(),
        CALL SEQUENCE Find_Elevator()
ENDSEQUENCE

SEQUENCE request_Elevator()           ' Request INSIDE Elevator
    WHEN Button_Is_Press
    CALL SEQUENCE Anti_Shenanigans()
    CALL SEQUENCE display_Btn_Active()
    CALL SEQUENCE display_Active_Floor()
    ADD to Elevator_queue
ENDSEQUENCE

SEQUENCE Find_Elevator()              ' Choose Elevator
    WHILE Elevator is Undefined
        FOR EACH elevator in Elevator_array
            IF (Elevator status IDLE and closer than other)
                Add elevator to  Elevator_queue 
            ELSE IF (elevator is not on same floor than user)
                IF (user status is User_up )
                    IF (Elevator MovingStatus is Elevator_UP AND under user floor AND  closer than an other one)
                        Add elevator to is Elevator_queue
                    ELSE IF (Elevator status is IDLE AND closer than other)
                        Add elevator to is Elevator_queue
                    ELSE 
                        Dont go
                    ENDIF
                ELSE IF (user status is User_Down)
                    IF (Elevator MovingStatus is Elevator_Down AND above user floor AND  closer than an other one)
                    Add elevator to is Elevator_queue
                    ELSE IF (Elevator status is IDLE and closer than other)
                        Add elevatore to is Elevator_queue
                    ELSE 
                        Dont go
                    ENDIF
                ENDIF
            ENDIF
        ENDFOR
    ENDWHILE
ENDSEQUENCE


SEQUENCE Find_Elevator()              ' Choose Elevator
    WHILE Elevator is Undefined
        FOR EACH elevator in Elevator_array                 ' chose the best elevator
            IF (User status is User_up)                         ' Check if user go up if YES ..
                IF (Elevator status is IDLE AND closer than other AND other elevator status is Moving)    ' Check if IDLE and near user
                    Add elevator to is Elevator_queue                                ' IF yes add
                ELSE IF (Elevator status is Moving)                     ' Check if Moving if YES
                    IF (Elevator MovingStatus is Elevator_UP)               ' Check if elevator go up if YES
                        IF (Floor request is above elevator )                   ' Check if request is on the way
                            Add elevator to is Elevator_queue                                ' If YES add
                        ELSE IF (Floor request is under elevator)               ' If NO dont go
                            Dont go
                        ENDIF                                                
                    ELSE IF (Elevator MovingStatus is Elevator_Down )       ' Check if elevator go down 
                        Dont go                                              ' IF YES dont go
                    ENDIF
                ENDIF
            ELSE IF (User status is User_Down)                  ' Check if user go down if YES ...
                IF (Elevator status is IDLE AND closer than other AND other elevator status is Moving)       ' Check if IDLE and near user
                    Add  to is Elevator_queue                            ' IF yes add
                ELSE IF (Elevator status is Moving)                  ' Check if Moving if YES
                    IF (Elevator MovingStatus is Elevator_UP)           ' Check if elevator go up 
                        Dont go                                             ' If YES dont go
                    ELSE IF (Elevator MovingStatus is Elevator_Down )   ' If YES Check if elevator go down
                        IF (Floor request is under elevator )               ' If YES Check if request is on the way
                            Add to is Elevator_queue                            ' If yes add
                        ELSE IF (Floor request is above elevator)           ' If NO dont go
                            Dont go 
                        ENDIF                                                    
                    ENDIF
                ENDIF
            ENDIF
        ENDFOR
    ENDWHILE
ENDSEQUENCE


*****
SEQUENCE Elevator_Move_Schema()

    CALL SEQUENCE ShowTime(), 
    CALL SEQUENCE display_Btn_Active(),
    CALL SEQUENCE display_Active_Floor(),
    CALL SEQUENCE Anti_Shenanigans()

    
        IF (elevator is at the same floor)
            CALL SEQUENCE Open_and_Close_Doors()
            IF (door is close) 
                CALL Elevator_queue of user input
            ENDIF
        ELSE IF (elevator is higher than User Floor AND request go down)
                IF (elevator is 2 floor away or more from requested floor)
                    Travel full speed to destination
                    CALL SEQUENCE SlowDownSafety() 
                    CALL SEQUENCE DoubleSafetyStop()
                ELSE
                    travel normal speed to destination
                    CALL SEQUENCE SlowDownSafety()
                    CALL SEQUENCE DoubleSafetyStop()
                ENDIF
        ELSE IF (elevator is under than User Floor AND request go down)
                IF elevator is 2 floor away or more from requested floor
                    Travel full speed to destination
                    CALL SEQUENCE SlowDownSafety()
                    CALL SEQUENCE DoubleSafetyStop()
                ELSE
                    travel normal speed to destination
                    CALL SEQUENCE SlowDownSafety()
                    CALL SEQUENCE DoubleSafetyStop()
                ENDIF
            ENDIF
        ENDIF
    CALL SEQUENCE Initialize()
ENDSEQUENCE